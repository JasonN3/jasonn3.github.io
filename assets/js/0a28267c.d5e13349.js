"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[328],{4137:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(r),c=a,f=m["".concat(p,".").concat(c)]||m[c]||d[c]||i;return r?n.createElement(f,o(o({ref:t},s),{},{components:r})):n.createElement(f,o({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},9364:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=r(7462),a=(r(7294),r(4137));const i={sidebar_label:"Git Repo",sidebar_position:1},o="Configuring your git repo for Puppet",l={unversionedId:"RH/satellite/puppet/git-repo",id:"RH/satellite/puppet/git-repo",title:"Configuring your git repo for Puppet",description:"Branches",source:"@site/docs/RH/satellite/puppet/git-repo.md",sourceDirName:"RH/satellite/puppet",slug:"/RH/satellite/puppet/git-repo",permalink:"/RH/satellite/puppet/git-repo",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Git Repo",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Puppet",permalink:"/category/puppet"},next:{title:"Provisioning",permalink:"/RH/satellite/provisioning"}},p={},u=[{value:"Branches",id:"branches",level:2},{value:"File Structure",id:"file-structure",level:2},{value:"Puppetfile",id:"puppetfile",level:2},{value:"Downloading from Puppet Forge",id:"downloading-from-puppet-forge",level:3},{value:"Modules",id:"modules",level:2}],s={toc:u},m="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configuring-your-git-repo-for-puppet"},"Configuring your git repo for Puppet"),(0,a.kt)("h2",{id:"branches"},"Branches"),(0,a.kt)("p",null,"Your branch names will become your Puppet environments. I would recommend creating a branch for each of your lifecycle steps (Ex: dev, test, qa, prod). Promoting can then be done using Merge Requests/Pull Requests without deleting the source branch. Your changes can then be deployed to each step indvidually. Additional branches can also be created for test work and assigned to a single machine without affecting other machines."),(0,a.kt)("h2",{id:"file-structure"},"File Structure"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#puppetfile"},"Puppetfile")),(0,a.kt)("li",{parentName:"ul"},"environment.conf"),(0,a.kt)("li",{parentName:"ul"},"hiera.yaml"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#modules"},"modules"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"module1",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"metadata.json"),(0,a.kt)("li",{parentName:"ul"},"manifests",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"init.pp"),(0,a.kt)("li",{parentName:"ul"},"class1.pp"))))),(0,a.kt)("li",{parentName:"ul"},"module2",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"metadata.json"),(0,a.kt)("li",{parentName:"ul"},"manifests",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"init.pp"),(0,a.kt)("li",{parentName:"ul"},"class1.pp")))))))),(0,a.kt)("h2",{id:"puppetfile"},"Puppetfile"),(0,a.kt)("p",null,"This file should be in the root of your git repo. It will contain a list of modules to download from ",(0,a.kt)("a",{parentName:"p",href:"https://forge.puppet.com"},"Puppet Forge")," or any other sources"),(0,a.kt)("h3",{id:"downloading-from-puppet-forge"},"Downloading from ",(0,a.kt)("a",{parentName:"h3",href:"https://forge.puppet.com"},"Puppet Forge")),(0,a.kt)("p",null,"1) Identify the module you would like to use by browsing ",(0,a.kt)("a",{parentName:"p",href:"https://forge.puppet.com"},"Puppet Forge"),"\n1) Under the ",(0,a.kt)("strong",{parentName:"p"},"Start using this module")," title, you can copy the line that needs to be added to the Puppetfile.  "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Adding a version specific module (recommended for stability)",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("inlineCode",{parentName:"li"},"mod 'puppet-r10k', '10.3.0'")),(0,a.kt)("li",{parentName:"ul"},"Adding the latest version of a module (recommended to ensure the latest version is used)",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("inlineCode",{parentName:"li"},"mod 'puppet-r10k', :latest"))),(0,a.kt)("h2",{id:"modules"},"Modules"),(0,a.kt)("p",null,"The modules should be created within a ",(0,a.kt)("inlineCode",{parentName:"p"},"modules")," directory at the root of the git repo.",(0,a.kt)("br",{parentName:"p"}),"\n","Within each module directory, a ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata.json")," is required.",(0,a.kt)("br",{parentName:"p"}),"\n","Example ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata.json"),":  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "author-module",\n  "version": "2023.102.10601",\n  "author": "author",\n  "summary": null,\n  "license": "Apache 2.0",\n  "source": "",\n  "issues_url": null,\n  "project_page": null,\n  "dependencies": [\n    {"version_requirement":">= 5.0.0","name":"puppetlabs-stdlib"}\n  ]\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," must start with ",(0,a.kt)("inlineCode",{parentName:"li"},"author"),"'s value"),(0,a.kt)("li",{parentName:"ul"},"A recommended format for ",(0,a.kt)("inlineCode",{parentName:"li"},"version")," is YYYY.1MM.1DD##",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("inlineCode",{parentName:"li"},"YYYY")," is the 4 digit year",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("inlineCode",{parentName:"li"},"MM")," is the 2 digit month",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("inlineCode",{parentName:"li"},"DD")," is the 2 digit day",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("inlineCode",{parentName:"li"},"##")," is a 2 digit incremental nuber that can be reset whenever the day changes",(0,a.kt)("br",{parentName:"li"}),"There are 1's before the month and day because each portion of the version number cannot start with a 0")))}d.isMDXComponent=!0}}]);